%% start of file `cbc_binary_tikz.sty'.
%% Copyright 2025 Max Melching (m-melching@web.de).
%
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License version 1.3c,
% available at http://www.latex-project.org/lppl/.


\ProvidesPackage{cbc_binary_tikz}

\RequirePackage{tikz}
\RequirePackage{tikz-3dplot}
\RequirePackage{xcolor}
\RequirePackage{etoolbox}


\usetikzlibrary{
	arrows.meta,
	math,
	calc,
}


\tikzset{>={Stealth[inset=0,angle'=27]}}


\definecolor{persianblue}{rgb}{0.11, 0.22, 0.73}
\definecolor{applegreen}{rgb}{0.55, 0.71, 0.0}
\definecolor{brilliantrose}{rgb}{1.0, 0.33, 0.64}

\definecolor{cbcbinary@spincolor}{named}{brown}
\definecolor{cbcbinary@lcolor}{named}{persianblue}
\colorlet{cbcbinary@jcolor}{cbcbinary@spincolor!50!cbcbinary@lcolor}
\definecolor{cbcbinary@chicolor}{named}{applegreen}
\definecolor{cbcbinary@thetacolor}{named}{brilliantrose}


\tdplotsetmaincoords{70}{120} % So that a default is set


\pgfkeys{
	/frames/binary/.is family, /frames/binary,
	default/.style = {
        mass1 = 20,
        mass2 = 10,
        spin1x = 0,
        spin1y = 0,
        spin1z = 0,
        spin2x = 0,
        spin2y = 0,
        spin2z = 0,
        inclination = 0,
        polarization = 0,
        eccentricity = 0,
        separation = 6,
        showcombinedquantities = true,
    },
    mass1/.estore in = \cbcbinary@MassOne,
    mass2/.estore in = \cbcbinary@MassTwo,
    spin1x/.estore in = \cbcbinary@SpinOneX,
    spin1y/.estore in = \cbcbinary@SpinOneY,
    spin1z/.estore in = \cbcbinary@SpinOneZ,
    spin2x/.estore in = \cbcbinary@SpinTwoX,
    spin2y/.estore in = \cbcbinary@SpinTwoY,
    spin2z/.estore in = \cbcbinary@SpinTwoZ,
	inclination/.estore in = \cbcbinary@Inclination,
	polarization/.estore in = \cbcbinary@Polarization,
    eccentricity/.estore in = \cbcbinary@Eccentricity,
    separation/.estore in = \cbcbinary@separation,
    showcombinedquantities/.estore in = \cbcbinary@ShowCombinedQuantities,
}

\pgfkeys{/frames/binary, default}  % Probably not required, but I want to make absolutely sure everything is defined -> we actually rely on this in cbc_frames_tikz, so definitely needed


\def\cbcbinary@BHsizepersolmass{1/20*0.7 cm} % So that 20 solmass BH has size of 0.7 sm
\def\cbcbinary@UnitSpinSize{1.5*\cbcbinary@BHsizepersolmass} % To get proportions right



\newcommand{\drawbinary}[1][]{%
    % -- Import keys for styling
    \pgfkeys{/frames/binary, default, #1}

    \begin{scope}[
        tdplot_main_coords, % Make sure their default value is used
        rotate around z=\cbcbinary@Polarization,
        rotate around x=\cbcbinary@Inclination,
    ]
        % -- Named coordinates are not affected by rotations, does not
        % -- matter if we define before or after they are applied
        \coordinate (center) at (0, 0, 0);
        \coordinate (bh1position) at (\cbcbinary@separation/2, 0, 0);
        \coordinate (bh2position) at (-\cbcbinary@separation/2, 0, 0);

        \begin{scope}[
            scale=\cbcbinary@UnitSpinSize, % Trick to resize vectors
        ]
            \coordinate (spin1) at (\cbcbinary@SpinOneX, \cbcbinary@SpinOneY, \cbcbinary@SpinOneZ);
            \coordinate (spin2) at (\cbcbinary@SpinTwoX, \cbcbinary@SpinTwoY, \cbcbinary@SpinTwoZ);
            \coordinate (totalspin) at ($(spin1) + (spin2)$);
        \end{scope}

        \coordinate (angularmomentum) at (0, 0, 2*\cbcbinary@UnitSpinSize);
        \coordinate (totalangularmomentum) at ($(angularmomentum) + (totalspin)$);
        \coordinate (chieff) at ($0.5*(angularmomentum)$);
        \coordinate (chip) at ($0.5*(bh1position)$);


        \begin{scope}[
            % rotate around z=\cbcbinary@Polarization,
            % rotate around x=\cbcbinary@Inclination,
            canvas is xy plane at z=0,
        ]
            %  -- Orbit
            \draw[
                dashed,
                gray,
                thick,
                opacity=0.5,
                yscale=1-\cbcbinary@Eccentricity,
            ] (center) circle(0.5*\cbcbinary@separation cm);

            % -- Black Hole 1
            \node[
                fill,
                circle,
                minimum size={\cbcbinary@MassOne*\cbcbinary@BHsizepersolmass},
                inner sep=0pt,
                label={below:\textcolor{cbcbinary@spincolor}{$m_1$}},
            ] at (bh1position) {};

            \draw[
                ->,
                thick,
                cbcbinary@spincolor,
            ] (bh1position) -- ++(spin1) node[above]{$\vec{S}_1$};


            % -- Black Hole 2
            \node[
                fill,
                circle,
                minimum size={\cbcbinary@MassTwo*\cbcbinary@BHsizepersolmass},
                inner sep=0pt,
                label={below right:\textcolor{cbcbinary@spincolor}{$m_2$}},
            ] at (bh2position) {};

            \draw[
                ->,
                thick,
                cbcbinary@spincolor,
            ] (bh2position) -- ++(spin2) node[right]{$\vec{S}_2$};


            % -- Stuff related to spins and angular momentum
            \draw[
                ->,
                thick,
                cbcbinary@lcolor,
                ] (center) -- (angularmomentum) node[left]{$\vec{L}_N$};

            % \ifthenelse{\equal{\cbcbinary@ShowCombinedQuantities}{true}}{
            \ifdefstring{\cbcbinary@ShowCombinedQuantities}{true}{
                \draw[
                    ->,
                    thick,
                    cbcbinary@spincolor,
                ] (center) -- ++(totalspin) node[right]{$\vec{S}$};

                \draw[
                    ->,
                    thick,
                    cbcbinary@jcolor,
                ] (center) -- (totalangularmomentum) node[left]{$\vec{J}$};

                            \draw[
                    ->,
                    thick,
                    cbcbinary@chicolor,
                ] (center) -- ++(chieff) node[below left]{$\chi_\mathrm{eff}$};

                \draw[
                    ->,
                    thick,
                    cbcbinary@chicolor,
                ] (center) -- ++(chip) node[below]{$\chi_p$};
            }{}
        \end{scope}

    \end{scope}
}
