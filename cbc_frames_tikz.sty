%% start of file `cbc_frames_tikz.sty'.
%% Copyright 2025 Max Melching (m-melching@web.de).
%
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License version 1.3c,
% available at http://www.latex-project.org/lppl/.


\ProvidesPackage{cbc_frames_tikz}

\RequirePackage{tikz}
\RequirePackage{tikz-3dplot}
\RequirePackage{xcolor}
\RequirePackage{wasysym}  % For \ascnode symbol

\RequirePackage{earth_tikz}


\usetikzlibrary{
	arrows.meta,
	math,
	calc,
    3d,
    backgrounds,
}


\tikzset{
    >={Stealth[inset=0,angle'=27]},
    % -- Define custom layers keyword. Credit: https://tex.stackexchange.com/questions/20425/z-level-in-tikz
    layer/.style={%
        execute at begin scope={\pgfonlayer{#1}},
        execute at end scope={\endpgfonlayer}
    },
    coordinate axis/.style={
        ->,
        black,
        semithick,
        layer=axes,
    },
    angle/.style={
        fill,
        opacity=0.42,
        layer=angles,
    },
    helper lines/.style={
        thick,
        gray!70!black,
        dotted,
        opacity=0.5,
        layer=BackGround,
    },
}


\definecolor{persianblue}{rgb}{0.11, 0.22, 0.73}
\definecolor{burntorange}{rgb}{0.8, 0.33, 0.0}
\definecolor{brown(traditional)}{rgb}{0.59, 0.29, 0.0}
\definecolor{carolinablue}{rgb}{0.6, 0.73, 0.89}
\definecolor{amethyst}{rgb}{0.6, 0.4, 0.8}


\definecolor{cbcframes@inclinationcolor}{named}{amethyst}
\definecolor{cbcframes@polarizationcolor}{named}{burntorange}
\definecolor{cbcframes@longasccolor}{named}{persianblue}
\definecolor{cbcframes@phirefcolor}{named}{carolinablue}
\definecolor{cbcframes@distancecolor}{named}{purple}
\definecolor{cbcframes@racolor}{named}{brown(traditional)}
\definecolor{cbcframes@deccolor}{named}{teal}


\tdplotsetmaincoords{70}{120} % So that a default is set


% -- Define default labels via commands, avoiding errors when setting
% -- pgfkeys with expressions that have to expanded (e.g. contain curly
% -- brackets or an "=")
\def\cbcframes@Inclination@Label{$\iota$}
\def\cbcframes@Ra@Label{$\alpha$}
\def\cbcframes@Dec@Label{$\delta$}
\def\cbcframes@Polarization@Label{$\psi$}
\def\cbcframes@Distance@Label{$D_L$}
\def\cbcframes@LineOfSight@Label{$\vec{N}$}
\def\cbcframes@PhiRef@Label{$\phi_\mathrm{ref}$}
\def\cbcframes@AscNode@Label{$\ascnode$}
% \def\cbcframes@Omega@Label{$\Omega = \pi/2 + \mathrm{longAscNodes}$}  % Error from the curly brackets...
\def\cbcframes@Omega@Label{$\Omega$}
\def\cbcframes@AzimuthalAngle@Label{$\pi/2 -$\cbcframes@PhiRef@Label}


\pgfkeys{
	/frames/.is family, /frames,
	default/.style = {
        binary = {%
            show = true,
            mass1 = 20,
            mass2 = 10,
            eccentricity = 0,
            scalefactor = 1,
        },
        distance = {%
            value = 3,
            show = true,
        },
        inclination = {%
            value = 0,
            show = true,
        },
        polarization = {%
            value = 0,
            show = true,
        },
        longascnodes = {%
            value = 0,
            show = true,
        },
        phiref = {%
            value = 0,
            show = true,
        },
        ra = {%
            value = 0,
            show = true,
        },
        dec = {%
            value = 0,
            show = true,
        },
        % -- No need to give defaults for labels, are all set above
        axislen = 3,
        axislabelpad = 0.12,  % Corresponds to 12% of \cbcframes@AxisLen
        uselayers = false,
        lineofsight/show = true,
        sourceframe = {%
            show = true,
            axes = true,
            helperlines = true,
        },
        signalframe = {%
            show = true,
            axes = true,
            helperlines = true,
            angles = true,
            ascnode = true,
            azimuthalangle = false,
        },
        celestialframe = {%
            show = true,
            angles = true,
            axes = true,
            helperlines = true,
        },
        earth = {%
            radius = 1.25,
            tilt = 0,
        },
        ifo = {%
            show = true,
            armlength = 2,
        },
    },
    % -- General note: For certain arguments, it makes sense to give them separately,
    % -- in addition to them being part of a subfamily. Thus, do not be surprised if
    % -- some things are defined multiple times.
    % 
    % -- Some general arguments
    axislen/.estore in = \cbcframes@AxisLen,
    axislabelpad/.estore in = \cbcframes@AxisLabelPad,
    uselayers/.estore in = \cbcframes@UseLayers,
    % 
    binary/show/.estore in = \cbcframes@Binary@Show,
    binary/mass1/.estore in = \cbcframes@MassOne,
    binary/mass2/.estore in = \cbcframes@MassTwo,
    mass1/.estore in = \cbcframes@MassOne,
    mass2/.estore in = \cbcframes@MassTwo,
    binary/eccentricity/.estore in = \cbcframes@Eccentricity,
    eccentricity/.estore in = \cbcframes@Eccentricity,
    binary/scalefactor/.estore in = \cbcframes@binary@scalefactor,
    binary/distance/.estore in = \cbcframes@Distance,
    binary/bhsizepersolmass/.estore in = \cbcframes@BHsizepersolmass,
    bhsizepersolmass/.estore in = \cbcframes@BHsizepersolmass,
    % 
    inclination/value/.estore in = \cbcframes@Inclination,
    inclination/show/.estore in = \cbcframes@Inclination@Show,
    inclination/label/.estore in = \cbcframes@Inclination@Label,
    % 
    polarization/value/.estore in = \cbcframes@Polarization,
    polarization/show/.estore in = \cbcframes@Polarization@Show,
    polarization/label/.estore in = \cbcframes@Polarization@Label,
    % 
    longascnodes/value/.code = {
        \def\LongAscNodes{#1}
        \def\LongAscOmega{#1 + 90}
    },
    longascnodes/show/.estore in = \cbcframes@LongAscNodes@Show,
    longascnodes/omegalabel/.estore in = \cbcframes@Omega@Label,  % TODO: rename to longascnodes/label?
    % 
    phiref/value/.estore in = \cbcframes@PhiRef,
    phiref/show/.estore in = \cbcframes@PhiRef@Show,
    phiref/label/.estore in = \cbcframes@PhiRef@Label,
    % 
    ra/value/.estore in = \cbcframes@Ra,
    ra/show/.estore in = \cbcframes@Ra@Show,
    ra/label/.estore in = \cbcframes@Ra@Label,
    % 
    dec/value/.estore in = \cbcframes@Dec,
    dec/show/.estore in = \cbcframes@Dec@Show,
    dec/label/.estore in = \cbcframes@Dec@Label,
    % 
    lineofsight/show/.estore in = \cbcframes@LineOfSight@Show,
    lineofsight/label/.estore in = \cbcframes@LineOfSight@Label,
    % 
    distance/value/.estore in = \cbcframes@Distance,
    distance/show/.estore in = \cbcframes@Distance@show,
    distance/label/.estore in = \cbcframes@Distance@Label,
    % 
    ascnode/show/.estore in = \cbcframes@SignalFrame@AscNode@Show,
    ascnode/label/.estore in = \cbcframes@AscNode@Label,
    % 
    labels/inclination/.estore in = \cbcframes@Inclination@Label,
    labels/polarization/.estore in = \cbcframes@Polarization@Label,
    labels/longascnodes/.estore in = \LongAscNodes@Label,
    labels/omega/.estore in = \cbcframes@Omega@Label,
    labels/phiref/.estore in = \cbcframes@PhiRef@Label,
    labels/ra/.estore in = \cbcframes@Ra@Label,
    labels/dec/.estore in = \cbcframes@Dec@Label,
    labels/lineofsight/.estore in = \LineOfSight@Label,
    labels/distance/.estore in = \cbcframes@Distance@Label,
    labels/ascnode/.estore in = \cbcframes@AscNode@Label,
    labels/azimuthalangle/.estore in = \cbcframes@AzimuthalAngle@Label,
    % 
    angles/inclination/.code = {\cbcframes@passonpgfkeys{/frames}{inclination}{value}{#1}},
    angles/polarization/.code = {\cbcframes@passonpgfkeys{/frames}{polarization}{value}{#1}},
    angles/longascnodes/.code = {\cbcframes@passonpgfkeys{/frames}{longascnodes}{value}{#1}},
    angles/phiref/.code = {\cbcframes@passonpgfkeys{/frames}{phiref}{value}{#1}},
    angles/ra/.code = {\cbcframes@passonpgfkeys{/frames}{ra}{value}{#1}},
    angles/dec/.code = {\cbcframes@passonpgfkeys{/frames}{dec}{value}{#1}},
    % 
    sourceframe/show/.code = {%
        \ifthenelse{\equal{#1}{false}}{%
            % -- Only overwrite stuff if set to false
            \def\cbcframes@Binary@Show{false}%
            \def\cbcframes@Sourceframe@Axes{false}%
            \def\cbcframes@Sourceframe@Helperlines{false}%
        }{}
    },
    sourceframe/axes/.estore in = \cbcframes@Sourceframe@Axes,
    sourceframe/helperlines/.estore in = \cbcframes@Sourceframe@Helperlines,
    % 
    signalframe/show/.code = {%
        \ifthenelse{\equal{#1}{false}}{%
            % -- Only overwrite stuff if set to false
            % \def\cbcframes@Binary@Show{false}%
            \def\cbcframes@Signalframe@Axes{false}%
            \def\cbcframes@Signalframe@Helperlines{false}%
            \def\cbcframes@Signalframe@Angles{false}%
            \def\cbcframes@Signalframe@AzimuthalAngle@Show{false}%
        }{}
    },
    signalframe/axes/.estore in = \cbcframes@Signalframe@Axes,
    signalframe/helperlines/.estore in = \cbcframes@Signalframe@Helperlines,
    signalframe/angles/.estore in = \cbcframes@Signalframe@Angles,
    signalframe/ascnode/.estore in = \cbcframes@SignalFrame@AscNode@Show,
    signalframe/azimuthalangle/.estore in = \cbcframes@Signalframe@AzimuthalAngle@Show,
    azimuthalangle/show/.estore in = \cbcframes@Signalframe@AzimuthalAngle@Show,
    azimuthalangle/label/.estore in = \cbcframes@AzimuthalAngle@Label,
    % 
    celestialframe/show/.estore in = \cbcframes@Celestialframe@Show,
    celestialframe/axes/.estore in = \cbcframes@Celestialframe@Axes,
    celestialframe/helperlines/.estore in = \cbcframes@Celestialframe@Helperlines,
    celestialframe/angles/.estore in = \cbcframes@Celestialframe@Angles,
    % 
    ifo/show/.estore in = \cbcframes@IFO@Show,
    ifo/armlength/.estore in = \cbcframes@IFO@Armlength,
}


\def\cbcframes@BHsizepersolmass{1/20*0.7 cm} % So that 20 solmass BH has size of 0.7 cm


% -- Define a pgfkeys handler
% -- Arg 1: base family; arg 2: subfamily that we wish to parse
\newcommand*\cbcframes@pgfkeysdefvalueorkeys[3]{%
  \pgfkeys{#1/#2/.code={%
    \pgfutil@in@={##1}%
    \ifpgfutil@in@%
      % -- Multiple key-value pairs given, parse them
      \pgfkeysalso{#1/#2/.cd, ##1, #1/.cd}%
    \else
      % -- Only one value given, set it to "value" subkey
    \pgfkeysalso{#1/#2/#3=##1, #1/.cd}%  We NEED this because we want to trigger the setter, in order for commands to get defined
    \fi
  }}
  % -- It is CRUCIAL to navigate back to the base family, otherwise subsequent keys are not processed correctly
}

\newcommand*\cbcframes@passonpgfkeys[4]{%
    \pgfutil@in@={#4}%
    \ifpgfutil@in@%
        % -- Multiple key-value pairs given, parse them
        \pgfkeysalso{#1/#2/.cd, #4, #1/.cd}%
    \else
        % -- Only one value given, set it to "value" subkey
        \pgfkeysalso{#1/#2/#3=#4, #1/.cd}%  We NEED this because we want to trigger the setter, in order for commands to get defined
    \fi
}


\cbcframes@pgfkeysdefvalueorkeys{/frames}{inclination}{value}
\cbcframes@pgfkeysdefvalueorkeys{/frames}{polarization}{value}
\cbcframes@pgfkeysdefvalueorkeys{/frames}{longascnodes}{value}
\cbcframes@pgfkeysdefvalueorkeys{/frames}{phiref}{value}
\cbcframes@pgfkeysdefvalueorkeys{/frames}{ra}{value}
\cbcframes@pgfkeysdefvalueorkeys{/frames}{dec}{value}

\cbcframes@pgfkeysdefvalueorkeys{/frames}{lineofsight}{show}
\cbcframes@pgfkeysdefvalueorkeys{/frames}{distance}{value}
\cbcframes@pgfkeysdefvalueorkeys{/frames}{ascnode}{show}
\cbcframes@pgfkeysdefvalueorkeys{/frames}{azimuthalangle}{show}
\cbcframes@pgfkeysdefvalueorkeys{/frames}{labels}{}  % There is no sensible default here
\cbcframes@pgfkeysdefvalueorkeys{/frames}{angles}{}  % There is no sensible default here

\cbcframes@pgfkeysdefvalueorkeys{/frames}{binary}{show}
\cbcframes@pgfkeysdefvalueorkeys{/frames}{sourceframe}{show}
\cbcframes@pgfkeysdefvalueorkeys{/frames}{signalframe}{show}
\cbcframes@pgfkeysdefvalueorkeys{/frames}{celestialframe}{show}
\cbcframes@pgfkeysdefvalueorkeys{/frames}{earth}{radius}
% -- Earth already exists, due to earth_tikz file. But it is still important to define
% -- it here, so that we get correct navigation back (and convenient, too, for default)
\cbcframes@pgfkeysdefvalueorkeys{/frames}{ifo}{show}


\pgfkeys{/frames, default}  % Probably not required, but I want to make absolutely sure everything is defined



% -- NOTE: reason that rotation has no effect sometimes is due to named coordinates
% -- being used I think! So rotating something like "(earthpos) -- (binaryposition)"
% -- has no effect, we have to give coordinates like "(earthpos) -- ++(1, 0, 0)"


% -- NOTE: in order to understand how and why this file works, knowing about
% -- the following behaviour is crucial:
% -- * rotating in two separate environments is same as doing it in the same
% --   order in a single environment
% -- * order in which rotations are applied is from top to bottom
% -- * when in a rotated coordinate system, "rotate about x" refers to an
% --   operation in the rotated system, and not the initial, unrotated one



\newcommand{\drawframes}[1][]{%
    % -- Import keys for styling
    \def\earthcalledfrombinary{true}
    \pgfkeys{/frames, default, #1}


    % -- Define image layers
    \pgfdeclarelayer{angles}
    \pgfdeclarelayer{axes}
    \pgfdeclarelayer{binary}
    \pgfdeclarelayer{BackGround}
    \pgfdeclarelayer{ForeGround}
    \pgfsetlayers{BackGround,angles,main,axes,ForeGround} % Order from back to front

    % -- Check whether layers shall be used
    \ifthenelse{\equal{\cbcframes@UseLayers}{false}}{
        \tikzset{layer/.style={}}
    }{}


    \ifthenelse{\equal{\cbcframes@Celestialframe@Show}{true}}{
        % -- Draw earth
        \coordinate (earthpos) at (0, 0, 0);
        
        \begin{scope}[
            tdplot_screen_coords,
            shift={(earthpos)}, % To be future proof, does nothing right now
            layer=BackGround,
        ]
            \drawearth;
            
            % -- Draw interferometer on earth
            \ifthenelse{\equal{\cbcframes@IFO@Show}{true}}{
                \begin{scope}[
                    tdplot_screen_coords,
                    shift={(-0.12, 0.55)},
                    rotate=305+\earth@angE,
                    scale=0.1*\earth@RE,
                ]
                    \usetikzlibrary{decorations.markings, calc, arrows.meta, positioning, shadings}
                    
                    \tikzset{arrow inside/.style = {postaction=decorate, decoration={markings, mark=at position .67 with \arrow{stealth}}}}
                    
                    % \tikzset{laser/.style={black, fill=black!40}}
                    \tikzset{laser/.style={line width=0pt, black, outer color=black!40, inner color=black!32}}
                    \tikzset{ray/.style={thick, red}}%, arrow inside}} % Inner and outer color does not work
                    \tikzset{mirror/.style={line width=0pt, outer color=black!50, inner color=white}}
                    \tikzset{photodiode/.style={line width=0pt, outer color=orange!90!black, inner color=orange!40}}
                    
                    
                    \coordinate (BS) at (0, 0);
                    \coordinate (MX) at ($(BS) + (\cbcframes@IFO@Armlength, 0)$);
                    \coordinate (MY) at ($(BS) + (0, \cbcframes@IFO@Armlength)$);
                    \coordinate (LA) at ($(BS) - (0.3*\cbcframes@IFO@Armlength, 0)$);
                    \coordinate (PD) at ($(BS) - (0, 0.3*\cbcframes@IFO@Armlength)$);
                
                
                    \draw[ray] (LA) -- (BS) {}; % Laser -> beam splitter
                    \draw[ray] (BS) -- (MX) {}; % Beam splitter -> right mirror
                    \draw[ray] (BS) -- (MY) {}; % Beam splitter -> upper mirror
                    \draw[ray] (BS) -- (PD) {}; % Beam splitter -> photo diode
                
                    \draw[laser, shift={(LA)}] (0, -0.15) rectangle (-0.7, 0.15) {};
                    \draw[mirror, shift={(MX)}] (0, -0.3) rectangle (-0.2, 0.3) {};
                    \draw[mirror, shift={(MY)}] (-0.3, 0) rectangle (0.3, -0.2) {};
                    \draw[photodiode, shift={(PD)}] (0.3, 0) -- (-0.3, 0) arc[start angle=-180, end angle=0, radius=0.3cm-0.1pt] {};
                \end{scope}
            }{}
        \end{scope}

        
        \begin{scope}[
            tdplot_main_coords, % Make sure their default value is used
        ]
            % -- Celestial frame axes definition + drawing
            \coordinate (xdoubleprimetip) at (\cbcframes@AxisLen, 0, 0);
            \coordinate (ydoubleprimetip) at (0, \cbcframes@AxisLen, 0);
            \coordinate (zdoubleprimetip) at (0, 0, \cbcframes@AxisLen);

            \draw[coordinate axis] (earthpos) -- ++(xdoubleprimetip) node[pos=1+\cbcframes@AxisLabelPad]{$x''$};

            \draw[coordinate axis] (earthpos) -- ++(ydoubleprimetip) node[pos=1+\cbcframes@AxisLabelPad]{$y''$};

            \draw[coordinate axis] (earthpos) -- ++(zdoubleprimetip) node[pos=1+\cbcframes@AxisLabelPad]{$z''$};


            \ifthenelse{\equal{\cbcframes@Celestialframe@Angles}{true}}{
                % -- Visualization of dec
                \ifnum\cbcframes@Dec=0
                \else
                    \ifthenelse{\equal{\cbcframes@Dec@Show}{true}}{
                        \begin{scope}[
                            rotate around z=\cbcframes@Ra,
                            rotate around x=-90,
                            cbcframes@deccolor,
                        ]
                            \draw[angle] (earthpos) -- (\cbcframes@AxisLen, 0, 0) arc (0:-\cbcframes@Dec:\cbcframes@AxisLen);
                            
                            \draw[
                                layer=angles,
                                ->,
                                thick,
                            ] (earthpos) ++(\cbcframes@AxisLen, 0, 0) arc (0:-\cbcframes@Dec:\cbcframes@AxisLen);
                            
                            \draw[
                                layer=angles,
                                draw=none,
                            ] (earthpos) ++({(1+\cbcframes@AxisLabelPad)*\cbcframes@AxisLen}, 0, 0) arc (0:-\cbcframes@Dec:{(1+\cbcframes@AxisLabelPad)*\cbcframes@AxisLen}) node[midway] {\cbcframes@Dec@Label};
                        \end{scope}
                    }{}
                \fi
            
            
                % -- Visualization of ra
                \ifnum\cbcframes@Ra=0
                \else
                    \ifthenelse{\equal{\cbcframes@Ra@Show}{true}}{
                        \begin{scope}[
                            cbcframes@racolor,
                        ]
                            \draw[angle] (earthpos) -- (\cbcframes@AxisLen, 0, 0) arc (0:\cbcframes@Ra:\cbcframes@AxisLen);
                            
                            \draw[
                                layer=angles,
                                ->,
                                thick,
                            ] (earthpos) ++(\cbcframes@AxisLen, 0, 0) arc (0:\cbcframes@Ra:\cbcframes@AxisLen);
                            
                            \draw[
                                layer=angles,
                                draw=none,
                            ] (earthpos) ++({(1+\cbcframes@AxisLabelPad)*\cbcframes@AxisLen}, 0, 0) arc (0:\cbcframes@Ra:{(1+\cbcframes@AxisLabelPad)*\cbcframes@AxisLen}) node[midway] {\cbcframes@Ra@Label};
                        \end{scope}
                    }{}
                \fi
            }{}

        \end{scope}

    }{} % End of DrawCelestialFrame if clause


    % -- Rotations to go into signal frame
    \begin{scope}[
        tdplot_main_coords,
        rotate around z=\cbcframes@Ra,
        rotate around y=-\cbcframes@Dec, % Fine for position, no direction/orientation involved
    ]
        \coordinate (binaryposition) at (\cbcframes@Distance*\cbcframes@AxisLen, 0, 0);
    \end{scope}


    % -- Shift to really go into signal frame, in addition to rotation
    \ifthenelse{\equal{\cbcframes@Celestialframe@Show}{true}}{
        % -- Apply rotations
        \begin{scope}[
            tdplot_main_coords,
            shift={(binaryposition)},
            rotate around z=-90+\cbcframes@Ra,
            rotate around x=90+\cbcframes@Dec,
        ]

        \begin{scope}[
            % rotate around z=-\cbcframes@Polarization, % Clockwise about z'
            rotate around z=\cbcframes@Polarization, % Counter-clockwise about z'
        ]
    }{
        % -- No rotations required
        \begin{scope}[
            tdplot_main_coords,
            shift={(binaryposition)},
        ]    
    }
        % -- Signal frame axes definition + drawing
        \coordinate (xprimetip) at (\cbcframes@AxisLen, 0, 0);
        \coordinate (yprimetip) at (0, \cbcframes@AxisLen, 0);
        \coordinate (zprimetip) at (0, 0, \cbcframes@AxisLen);

        \ifthenelse{\equal{\cbcframes@Signalframe@Axes}{true}}{
            \draw[coordinate axis] (binaryposition) -- (xprimetip) node[pos=1+\cbcframes@AxisLabelPad]{$x'$};

            \draw[coordinate axis] (binaryposition) -- (yprimetip) node[pos=1+\cbcframes@AxisLabelPad]{$y'$};

            \draw[coordinate axis] (binaryposition) -- (zprimetip) node[pos=1+\cbcframes@AxisLabelPad]{$z'$};
        }{}

        
        % -- Helper lines
        \ifthenelse{\equal{\cbcframes@Signalframe@Helperlines}{true}}{
            \begin{scope}[
                canvas is xy plane at z=0,
            ]
                \draw[helper lines] (0.0, 0.0, 0.0) circle(\cbcframes@AxisLen cm) {};
            \end{scope}
        }{}


        % -- Rotations to go into source frame
        \begin{scope}[
            % rotate around z=-\LongAscOmega,
            rotate around z=\LongAscOmega,
        ]
            \begin{scope}[
                rotate around x=\cbcframes@Inclination,
                rotate around z=\cbcframes@PhiRef,
            ]
                \ifthenelse{\equal{\cbcframes@Binary@Show}{true}}{
                    \begin{scope}[
                        canvas is xy plane at z=0, % Needed for rotation of circle to work properly
                    ]
                        \coordinate (bhoneposition) at (0.5*\cbcframes@binary@scalefactor*\cbcframes@AxisLen, 0, 0);
                        \coordinate (bhtwoposition) at (-0.5*\cbcframes@binary@scalefactor*\cbcframes@AxisLen, 0, 0);

                        % -- Following may be overly complicated, but it works
                        \coordinate (bhonepositionresc) at ($ {\cbcframes@MassTwo/(\cbcframes@MassOne+\cbcframes@MassTwo)}*(bhoneposition) $);
                        \coordinate (bhtwopositionresc) at ($ {\cbcframes@MassOne/(\cbcframes@MassOne+\cbcframes@MassTwo)}*(bhtwoposition) $);
                        \coordinate (com) at ($ (bhonepositionresc) + (bhtwopositionresc) $);

                        \coordinate (bhonepositioncom) at ($ 2*(bhonepositionresc) $);
                        \coordinate (bhtwopositioncom) at ($ 2*(bhtwopositionresc) $);
                        % -- 2 only works because we want distance between them.
                        % -- Since axislen is already in x-component, we only have
                        % -- to multiply with 2 to get distance between them
                        % -- -> see https://en.wikipedia.org/wiki/Barycenter_(astronomy)#Two-body_problem

                        
                        \draw[
                            gray,
                            dashed,
                            thick,
                            opacity=0.5,
                            yscale=1-\cbcframes@Eccentricity,
                        ] (com) circle(0.5*\cbcframes@binary@scalefactor*\cbcframes@AxisLen cm) {};
                        
                        \node[
                            fill,
                            circle,
                            minimum size={\cbcframes@MassOne*\cbcframes@BHsizepersolmass},
                            inner sep=0pt,
                        % ] at (com)++(bhonepositioncom) {};
                        ] at (bhonepositioncom) {};
                        
                        \node[
                            fill,
                            circle,
                            minimum size={\cbcframes@MassTwo*\cbcframes@BHsizepersolmass},
                            inner sep=0pt,
                        % ] at (bhtwoposition) {};
                        ] at (bhtwopositioncom) {};
                    \end{scope}
                }{}
    
    
                % -- Source frame axes definition + drawing
                \coordinate (xtip) at (\cbcframes@AxisLen, 0, 0);
                \coordinate (ytip) at (0, \cbcframes@AxisLen, 0);
                \coordinate (ztip) at (0, 0, \cbcframes@AxisLen);

                \ifthenelse{\equal{\cbcframes@Sourceframe@Axes}{true}}{
                    \draw[coordinate axis] (binaryposition) -- (xtip) node[pos=1+\cbcframes@AxisLabelPad]{$x$};

                    \draw[coordinate axis] (binaryposition) -- (ytip) node[pos=1+\cbcframes@AxisLabelPad]{$y$};

                    \draw[coordinate axis] (binaryposition) -- (ztip) node[pos=1+\cbcframes@AxisLabelPad]{$z$};
                }{}
        

                \ifthenelse{\equal{\cbcframes@Signalframe@Angles}{true}}{
                    % -- Visualization of inclination
                    \ifnum\cbcframes@Inclination=0
                    \else
                        \ifthenelse{\equal{\cbcframes@Inclination@Show}{true}}{
                            \begin{scope}[
                                rotate around z=-\cbcframes@PhiRef,
                                rotate around x=-\cbcframes@Inclination,
                                rotate around y=-90,
                                cbcframes@inclinationcolor,
                            ]
                                \draw[angle] (binaryposition) -- (zprimetip) arc (0:-\cbcframes@Inclination:\cbcframes@AxisLen);
                                
                                \draw[
                                    layer=angles,
                                    ->,
                                    thick,
                                ] (zprimetip) arc (0:-\cbcframes@Inclination:\cbcframes@AxisLen);

                                \draw[
                                    layer=angles,
                                    draw=none,
                                ] (${(1+\cbcframes@AxisLabelPad)}*(zprimetip)$) arc (0:-\cbcframes@Inclination:{(1+\cbcframes@AxisLabelPad)*\cbcframes@AxisLen}) node[midway] {\cbcframes@Inclination@Label};
                            \end{scope}
                        }{}
                    \fi
        
        
                    % -- Visualization of PhiRef
                    \ifnum\cbcframes@PhiRef=0
                    \else
                        \ifthenelse{\equal{\cbcframes@PhiRef@Show}{true}}{
                            \draw[angle, cbcframes@phirefcolor] (binaryposition) -- (xtip) arc (0:-\cbcframes@PhiRef:\cbcframes@AxisLen);
                            
                            \draw[
                                layer=angles,
                                <-,
                                thick,
                                cbcframes@phirefcolor,
                            ] (binaryposition) ++(xtip) arc (0:-\cbcframes@PhiRef:\cbcframes@AxisLen);

                            \draw[
                                layer=angles,
                                draw=none,
                                cbcframes@phirefcolor,
                            ] (binaryposition) ++(${(1+\cbcframes@AxisLabelPad)}*(xtip)$) arc (0:-\cbcframes@PhiRef:{(1+\cbcframes@AxisLabelPad)*\cbcframes@AxisLen}) node[midway] {\cbcframes@PhiRef@Label};
                        }{}
                    \fi

                    \ifthenelse{\equal{\cbcframes@Signalframe@AzimuthalAngle@Show}{true}}{
                        % -- Visualize phiN from Fig. 1 of https://www.nature.com/articles/s41550-025-02632-5
                        \begin{scope}[
                            layer=angles,
                            rotate around z=90-\cbcframes@PhiRef,
                        ]
                            \begin{scope}[
                                rotate around x=90,
                            ]
                                \draw[
                                    cbcframes@distancecolor,
                                    thick,
                                    dashed,
                                ] (binaryposition) --++ (\cbcframes@AxisLen, 0, 0) arc (0:90-\cbcframes@Inclination:\cbcframes@AxisLen);
                                % ] (binaryposition) --++ (\cbcframes@AxisLen, 0, 0) arc (0:90:\cbcframes@AxisLen);  % More accurate. But not sure if that makes too crowded (goes right through inclination)
                            \end{scope}
                            
                            % \draw[
                            %     cbcframes@distancecolor,
                            %     thick,
                            %     dashed,
                            % ] (binaryposition) --++ (\cbcframes@AxisLen, 0, 0) -- (0, 0, \cbcframes@AxisLen);
                            % -- Straight line for connection. Don't think I like more than arc
                            
                            \draw[
                                cbcframes@distancecolor,
                                angle,
                            ] (binaryposition) --++ (\cbcframes@AxisLen, 0, 0) arc (0:-90+\cbcframes@PhiRef:\cbcframes@AxisLen);
                            
                            \draw[
                                <-,
                                thick,
                                cbcframes@distancecolor,
                            ] (binaryposition) ++ (\cbcframes@AxisLen, 0, 0) arc (0:-90+\cbcframes@PhiRef:\cbcframes@AxisLen);

                            \draw[
                                draw=none,
                                cbcframes@distancecolor,
                            ] (binaryposition) ++ ({(1+\cbcframes@AxisLabelPad)*\cbcframes@AxisLen}, 0, 0) arc (0:-90+\cbcframes@PhiRef:{(1+\cbcframes@AxisLabelPad)*\cbcframes@AxisLen}) node[midway, sloped] {\cbcframes@AzimuthalAngle@Label};
                        \end{scope}
                    }{}
                }{}
    
    
                % -- Helper lines
                \ifthenelse{\equal{\cbcframes@Sourceframe@Helperlines}{true}}{
                    \begin{scope}[
                        canvas is xy plane at z=0,
                    ]
                        \draw[helper lines] (0.0, 0.0, 0.0) circle(\cbcframes@AxisLen cm) {};
                    \end{scope}
                }{}
            \end{scope}


            % -- Visualization of line of ascending node
            \ifthenelse{\equal{\cbcframes@Signalframe@Axes}{true} \and \equal{\cbcframes@SignalFrame@AscNode@Show}{true}}{
                \draw[
                    layer=axes,
                    ->,
                % ] (binaryposition) -- (\cbcframes@AxisLen, 0, 0) node[anchor=north]{AscNodeLabel};
                % -- TODO: maybe move label to other place if longascnodes = 0? Then this here coincides with y'
                % -- -> better solution: elongate line that indicates ascending node
                ] (binaryposition) -- (1.25*\cbcframes@AxisLen, 0, 0) node[pos=1+\cbcframes@AxisLabelPad]{\cbcframes@AscNode@Label};
            }{}
        \end{scope}

        \ifthenelse{\equal{\cbcframes@Signalframe@Angles}{true}}{
            % -- Visualization of LongAscOmega
            \ifnum\LongAscNodes=-90 % Doing this with LongAscOmega = 0 does not work, must be due to use of \def
            \else
                \ifthenelse{\equal{\cbcframes@LongAscNodes@Show}{true}}{
                    \draw[angle, cbcframes@longasccolor] (binaryposition) -- (xprimetip) arc
                    (0:\LongAscOmega:\cbcframes@AxisLen);
                    % (0:-\LongAscOmega:\cbcframes@AxisLen);
                    
                    \draw[
                        layer=angles,
                        ->,
                        thick,
                        cbcframes@longasccolor,
                    ] (binaryposition) ++(xprimetip) arc (0:\LongAscOmega:\cbcframes@AxisLen);
                    % ] (binaryposition) ++(xprimetip) arc (0:-\LongAscOmega:\cbcframes@AxisLen);
                    
                    \draw[
                        layer=angles,
                        draw=none,
                        cbcframes@longasccolor,
                    ] (binaryposition) ++(${(1+\cbcframes@AxisLabelPad)}*(xprimetip)$) arc (0:\LongAscOmega:{(1+\cbcframes@AxisLabelPad)*\cbcframes@AxisLen}) node[midway] {\cbcframes@Omega@Label};
                    % ] (binaryposition) ++(${(1+\cbcframes@AxisLabelPad)}*(xprimetip)$) arc (0:-\LongAscOmega:{(1+\cbcframes@AxisLabelPad)*\cbcframes@AxisLen}) node[midway] {\cbcframes@Omega@Label};
                }{}
            \fi
    
            % -- Visualization of polarization
            \ifthenelse{\equal{\cbcframes@Celestialframe@Show}{true}}{
                \ifnum\cbcframes@Polarization=0
                \else
                    \ifthenelse{\equal{\cbcframes@Polarization@Show}{true}}{
                        \draw[angle, cbcframes@polarizationcolor] (binaryposition) -- (xprimetip) arc
                        (0:-\cbcframes@Polarization:\cbcframes@AxisLen); % Counter-clockwise aroud z'
                        % (0:\cbcframes@Polarization:\cbcframes@AxisLen); % Clockwise aroud z'
                        
                        \draw[
                            layer=angles,
                            <-,
                            thick,
                            cbcframes@polarizationcolor,
                        ] (binaryposition) ++(xprimetip) arc (0:-\cbcframes@Polarization:\cbcframes@AxisLen); % Counter-clockwise around z'
                        % ] (binaryposition) ++(xprimetip) arc (0:\cbcframes@Polarization:\cbcframes@AxisLen); % Clockwise aroud z'

                        \draw[
                            layer=angles,
                            draw=none,
                            cbcframes@polarizationcolor,
                        ] (binaryposition) ++(${(1+\cbcframes@AxisLabelPad)}*(xprimetip)$) arc (0:-\cbcframes@Polarization:{(1+\cbcframes@AxisLabelPad)*\cbcframes@AxisLen}) node[midway] {\cbcframes@Polarization@Label}; % Counter-clockwise around z'
                        % ] (binaryposition) ++(${(1+\cbcframes@AxisLabelPad)}*(xprimetip)$) arc (0:\cbcframes@Polarization:{(1+\cbcframes@AxisLabelPad)*\cbcframes@AxisLen}) node[midway] {\cbcframes@Polarization@Label}; % Clockwise around z'
                    }{}
                \fi
            }{}
        }{}
        
    \end{scope}
    \ifthenelse{\equal{\cbcframes@Celestialframe@Show}{true}}{
        \end{scope}
    }{}

	\ifthenelse{\equal{\cbcframes@Celestialframe@Show}{true}}{
        % -- Visualization of relation between celestial and signal frame        
        \begin{scope}[
            % layer=angles,
            cbcframes@distancecolor,
            thick,
        ]
            % \tikzmath{
            %     \cbcframes@Decrasignum = \cbcframes@Dec/abs(\cbcframes@Dec) + \cbcframes@Ra/abs(\cbcframes@Ra);
            % }
            % -- To minimize code duplication due to required if clause
            % \ifnum\cbcframes@Decra>0
            % \ifdim\cbcframes@Decrasignum pt>0 pt
            \ifnum\cbcframes@Ra<0
                \ifthenelse{\equal{\cbcframes@LineOfSight@Show}{true}}{
                    \draw[
                        ->,
                        layer=angles,
                    ] (earthpos) -- (binaryposition) node[midway, sloped, above]{\cbcframes@LineOfSight@Label};
                }{}
            
                \ifthenelse{\equal{\cbcframes@Distance@show}{true}}{
	                \draw[
	                    decorate,
	                    decoration={
	                        brace,
	                        amplitude=10pt,
	                        % mirror, -> now handled by if clause
	                    },
                        layer=angles,
	                ] (earthpos) -- (binaryposition) node[midway, sloped, below=10]{\cbcframes@Distance@Label};
                }{}
            \else
                \ifthenelse{\equal{\cbcframes@LineOfSight@Show}{true}}{
                    \draw[
                        ->,
                    ] (earthpos) -- (binaryposition) node[midway, sloped, below]{\cbcframes@LineOfSight@Label};
                }{}
                
                \ifthenelse{\equal{\cbcframes@Distance@show}{true}}{
	                \draw[
	                    decorate,
	                    decoration={
	                        brace,
	                        amplitude=10pt,
	                    },
                        layer=angles,
	                ] (earthpos) -- (binaryposition) node[midway, sloped, above=10]{\cbcframes@Distance@Label};
                }{}
            \fi

        \end{scope}
    }{}

} 
